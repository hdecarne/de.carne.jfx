apply plugin: "java-library"
apply plugin: "de.carne.gradleplugins.java"
apply plugin: "jacoco"
apply plugin: "maven"
apply plugin: "signing"
apply plugin: "eclipse"

buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
		jcenter()
	}
	dependencies {
		classpath("de.carne:java-gradleplugins:0.4.0")
	}
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
	if(project.version.endsWith("-SNAPSHOT")) {
		mavenLocal()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
		maven { url "https://oss.jfrog.org/libs-snapshot/" }
	} 
	jcenter()
	mavenCentral()
}

dependencies {
	api(group: "de.carne.common", name: "java-default", version: "8.7.0-SNAPSHOT")

	testImplementation(group: "junit", name: "junit", version: "4.12")
	testImplementation(group: "org.testfx", name: "testfx-core", version: "4.0.5-alpha")
	testImplementation(group: "org.testfx", name: "openjfx-monocle", version: "8u20-b26")
}

jar {
	manifest {
		attributes "Automatic-Module-Name": automaticModuleName
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
		html.enabled true
		html.destination file("${buildDir}/reports/jacoco")
		csv.enabled false
	}
}

task javadocJar(type: Jar) {
	classifier = "javadoc"
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = "sources"
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

signing {
	if (project.hasProperty("signing.keyId")) {
		sign configurations.archives
	}
}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: project.ext.properties.ossrhUsername, password: project.ext.properties.ossrhPassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: project.ext.properties.ossrhUsername, password: project.ext.properties.ossrhPassword)
			}
			
			pom.artifactId = project.name
			
			pom.project {
				name project.name
				packaging "jar"
				description projectDescription
				url projectUrl

				scm {
					connection projectScm
					developerConnection projectScm
					url projectScmUrl
				}

				licenses {
					license {
						name projectLicense
						url projectLicenseUrl
						distribution "repo"
					}
				}

				developers {
					developer {
						id developerId
						name developerName
						email developerEmail
					}
				}
			}
		}
	}
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
		file {
			whenMerged {
				def eeaPath = project.findProperty("eclipse.eeaPath");
				 
				entries.forEach {
					if(it.path.startsWith("org.eclipse.jdt.launching.JRE_CONTAINER")) {
						it.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule("0", "javafx/**"))
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
					} else if(it.path.contains("/caches/modules-2/")) {
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
					}
				}
			}
		}
	}
}
