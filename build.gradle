plugins {
	id "de.carne.java-tools" version "0.7.5" apply false
}

apply plugin: "java-library"
apply plugin: "de.carne.java-tools"
apply plugin: "jacoco"
apply plugin: "maven"
apply plugin: "signing"
apply plugin: "eclipse"

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets {
	main {
		java {
			srcDir "${buildDir}/generated/main/java"
		}
	}
}

javatools {
	generateI18N {
		enabled = true
		keyFilter = "^STR_.*"
		genDir = file("${buildDir}/generated/main/java")
		lineSeparator = "\n"
	}
}

repositories {
	if(project.version.endsWith("-SNAPSHOT")) {
		mavenLocal()
		maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
		maven { url "https://oss.jfrog.org/libs-snapshot/" }
	} 
	jcenter()
	mavenCentral()
}

dependencies {
	compileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
	testCompileOnly(group: "org.eclipse.jdt", name: "org.eclipse.jdt.annotation", version: project.annotationVersion)
	api(group: "de.carne.common", name: "java-default", version: project.javaDefaultVersion)

	testImplementation(group: "junit", name: "junit", version: project.junitVersion)
	testImplementation(group: "org.testfx", name: "testfx-core", version: project.testfxCoreVersion)
	testImplementation(group: "org.testfx", name: "openjfx-monocle", version: project.openjfxMonocleVersion)
}

jar {
	manifest {
		attributes(
			'Automatic-Module-Name': automaticModuleName,
			'Created-By': "Gradle ${gradle.gradleVersion} (${System.properties['os.name']}:${System.properties['os.arch']}:${System.properties['os.version']})",
			'Build-Jdk' : System.properties['java.version'],
			'Build-Timestamp': new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ").format(new Date()),
			'X-Compile-Target-JDK': targetCompatibility,
			'X-Compile-Source-JDK': sourceCompatibility,
			'X-Module-Id': project.name,
			'X-Module-Name': project.name,
			'X-Module-Version': project.version,
			'X-Module-DocURL': projectUrl,
			'X-Module-License': projectLicenseUrl
		)
	}
}

jacocoTestReport {
	reports {
		xml.enabled true
		xml.destination file("${buildDir}/reports/jacoco/coverage.xml")
		html.enabled true
		html.destination file("${buildDir}/reports/jacoco")
		csv.enabled false
	}
}

task javadocJar(type: Jar) {
	classifier = "javadoc"
	from javadoc
}

task sourcesJar(type: Jar) {
	classifier = "sources"
	from sourceSets.main.allSource
}

artifacts {
	archives javadocJar, sourcesJar
}

signing {
	if (project.hasProperty("signing.keyId")) {
		sign configurations.archives
	}
}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
				authentication(userName: project.ext.properties.ossrhUsername, password: project.ext.properties.ossrhPassword)
			}

			snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
				authentication(userName: project.ext.properties.ossrhUsername, password: project.ext.properties.ossrhPassword)
			}
			
			pom.artifactId = project.name
			
			pom.project {
				name project.name
				packaging "jar"
				description projectDescription
				url projectUrl

				scm {
					connection projectScm
					developerConnection projectScm
					url projectScmUrl
				}

				licenses {
					license {
						name projectLicense
						url projectLicenseUrl
						distribution "repo"
					}
				}

				developers {
					developer {
						id developerId
						name developerName
						email developerEmail
					}
				}
			}
		}
	}
}

eclipse {
	classpath {
		downloadSources = true
		downloadJavadoc = true
		file {
			whenMerged {
				def eeaPath = project.findProperty("eclipse.eeaPath");
				 
				entries.forEach {
					if(it.path.startsWith("org.eclipse.jdt.launching.JRE_CONTAINER")) {
						it.accessRules.add(new org.gradle.plugins.ide.eclipse.model.AccessRule("0", "javafx/**"))
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
					} else if(it.path.contains("/caches/modules-2/")) {
						if(eeaPath != null) {
							it.entryAttributes.put("annotationpath", eeaPath)
						}
					}
				}
			}
		}
	}
}
